(Script)
Script (Server-sided) so exploiters don't have access to sensitive information in this script: player location relative to block.
-----------------------------------------------------------------------------------------------------------------------------------------------
local tool = script.Parent
local Player = script.Parent.Parent.Parent --Maybe set this more accordingly? SetTarget may mess up?
local MineshaftItems = game.ReplicatedStorage.ItemLocations.Mineshaft

--When the player barely hovers over the UI, the pickaxe continues to mine... mouse.target check must be getting confused

function script.Parent.SetTarget.OnServerInvoke(player,Selection)
	script.Parent.Target.Value = Selection
end

local PickaxeStats = require(script.Parent:WaitForChild("PickaxeStats"))

local MouseDown = false
local Debounce = true

--Start mining process, check player for any preventive measure before actually mining ore
local function StartMining()
	
	--Possibly check bag amounts here instead?
	
	local Target = script.Parent.Target.Value
	if Debounce then
		repeat wait() until Player ~= nil
		if Target then --If player hasn't stopped mining/looking at an ore
			--(Cannot have mouse.target be meshpart since it's a descendant of targetfiltered part)
			--if Target:IsA("MeshPart") then --Select special shape
				--RealOre = Ores:FindFirstChild(Target.Parent.Name)
			--elseif Target:FindFirstChild("MeshPart") then --Special shape, but not looking at it
				--RealOre = nil
			--else --No special shape, select 7x7x7 box
				--RealOre = Ores:FindFirstChild(Target.Name)
			--end
			
			local RealOre
			if Target.Name == "Target" then
				RealOre = MineshaftItems:FindFirstChild(Target.Parent.Name)
			else
				RealOre = MineshaftItems:FindFirstChild(Target.Name)
			end
			if RealOre then
				MouseDown = true
				script.Parent.IsMining.Value = true
				
				--print((Target.Position - workspace.Players:FindFirstChild(tostring(Player)).HumanoidRootPart.Position).magnitude)
				--local CompactPos = Vector3.new(0 + Target.Position.X/7, (Target.Position.Y - -5)/(-7),Target.Position.Z/7)
				--if (Target.Position - workspace.Players:FindFirstChild(tostring(Player)).HumanoidRootPart.Position).magnitude <= PickaxeStats.Reach * 6.3 then
				
				local TimeToMine = ((RealOre.Strength.Value / PickaxeStats.Efficiency))
				local WaitTime = 0
				
				Debounce = false --Prevents mining to happen again until this block has been mined
				spawn(function()
					wait(TimeToMine + PickaxeStats.Delay)
					Debounce = true
				end)
				
				repeat
					wait(0.01)
					WaitTime = WaitTime + 0.01
					
					Target.Reflectance = WaitTime/TimeToMine --use target's reflectance as reference across scripts
					--print("Progress: " .. tostring(Target.Reflectance))
				until WaitTime >= TimeToMine or not MouseDown or Target ~= script.Parent.Target.Value
				
				local mined = true
				if WaitTime >= TimeToMine and mined then
					game.ServerStorage.MineOre:Invoke(Player, Target)
					mined = false
				else
					Target.Reflectance = 0
				end
				
				--Made it past repeat check, prepare for holding mouse and mouse1 release
				wait(PickaxeStats.Delay)
				Debounce = true
				if MouseDown then --keep mining if mouse is still down
					--print("Mouse is down")
					StartMining()
				else
					script.Parent.IsMining.Value = false
					MouseDown = false
				end
			end
		else
			script.Parent.IsMining.Value = false
		end
	end
end

script.Parent.Activation.OnServerEvent:Connect(function(player, State)
	if player == Player then
		if State and not MouseDown then --if state sent is true and player isn't already mining, start mining
			MouseDown = true
			StartMining()
		else
			MouseDown = false
			script.Parent.IsMining.Value = false
		end
	end
end)

tool.Unequipped:Connect(function()
	MouseDown = false
	script.Parent.IsMining.Value = false
end)

